..
   Copyright 2009-2011 Ram Rachum. This work is licensed under a Creative
   Commons Attribution-ShareAlike 3.0 Unported License, with attribution to
   "Ram Rachum at cool-rr.com" including link. The license may be obtained
   at http://creativecommons.org/licenses/by-sa/3.0/

.. _ref-garlicsim_wx_general_misc-cute_window:

===========================================================================================================
:class:`CuteWindow <garlicsim_wx.widgets.general_misc.cute_window.CuteWindow>`: An improved wxPython window
===========================================================================================================

:class:`CuteWindow <garlicsim_wx.widgets.general_misc.cute_window.CuteWindow>`
is a wxPython window which subclasses from :class:`wx.Window` and adds a few
useful functionalities on top of it.

Each section in this document will explain a feature of :class:`CuteWindow
<garlicsim_wx.widgets.general_misc.cute_window.CuteWindow>` and how to use it.


Binding event handlers by name
==============================

The traditional way of binding events in wxPython is by calling
:meth:`self.Bind <wx.Window.Bind>`. This can be too verbose, and result in more
bloated constructors for your widgets. To remedy this, :class:`CuteWindow
<garlicsim_wx.widgets.general_misc.cute_window.CuteWindow>` allows binding
event handlers automatically by their name. Since you probably name your event
handlers according to which event they handle, we might as well use that name
instead of requiring you to call :meth:`self.Bind <wx.Window.Bind>` many times
in your widget's ``__init__``.

To bind event handlers by name, call ``self.bind_event_handlers(window_type)``
where ``window_type`` is the class of your window. (Typically the class in
whose ``__init__`` you're doing the binding.)

Example::

    from garlicsim_wx.widgets.general_misc.cute_window import CuteWindow

    class MyWidget(CuteWindow):
    
        def __init__(self, parent):
            CuteWindow.__init__(self, parent)
            self.ok_button = wx.Button(self, label='Press me')
            self.bind_event_handlers(MyWidget)

        def _on_key_down(self, event):
            pass            
            # Handler for `wx.EVT_KEY_DOWN`. do whatever you want here.
                
                
        def _on_set_focus(self, event):
            pass            
            # Handler for `wx.EVT_SET_FOCUS`. do whatever you want here.
            
            
        def _on_ok_button(self, event):
            pass            
            # Handler for `self.ok_button` being pressed. Do whatever you want
            # here.
            
            
        def _on_ok_button__set_focus(self, event):
            pass            
            # Handler for `self.ok_button` receiving the focus. Do whatever
            # you want here.
            

There are three different kinds of usage in the example above:

- **Binding to component.** When ``_on_ok_button`` is encountered, a search is
  made for ``self.ok_button``, and because it exists, we bind to the default
  event for this kind of widget: :data:`wx.EVT_BUTTON`.
  
- **Binding to event type.** When ``_on_key_down`` is encountered, we bind to the
  :data:`wx.EVT_KEY_DOWN` event.
  
- **Nested bind.** When ``_on_ok_button__set_focus`` is encountered, we bind to
  the :data:`wx.EVT_SET_FOCUS` event with a ``source`` of ``self.ok_button``,
  i.e. the handler will be invoked only when the button comes into focus.

            
            
Using different naming conventions
----------------------------------

Not everyone uses the same naming conventions for their event handlers. Some people
            

:attr:`freezer <garlicsim_wx.widgets.general_misc.cute_window.CuteWindow.freezer>`
==================================================================================

todo: This section is not written yet.


:meth:`create_cursor_changer <garlicsim_wx.widgets.general_misc.cute_window.CuteWindow.create_cursor_changer>`
==============================================================================================================

todo: This section is not written yet.


:meth:`add_accelerators <garlicsim_wx.widgets.general_misc.cute_window.CuteWindow.add_accelerators>`
====================================================================================================

todo: This section is not written yet.

